rfw - remote firewall
=====================

| Remote firewall as a web service.
| 
| rfw is the RESTful server which applies iptables rules to block or allow IP addresses on request from a remote client.
| rfw maintains the list of blocked IP addresses which may be updated in real time from many sources. rfw also solves the problem of concurrent modifications to iptables since the requests are serialized.

Typical use cases
-----------------

1. You manage a group of machines which are deployed/controlled/monitored from a central server or admin panel. You need to react quickly/automatically on abuse/DDOS with the rules generated by the intelligence/analytics/geolocation-aware server. You push the IP blocklist updates to other machines in real time.

2. You build the Peer-to-Peer network of servers or even Distributed Autonomous Organization (see Ethereum). The DAO, apart from running contracts on Ethereum, may need to run a P2P network. The servers cannot rely on the centralized firewall. With rfw the peer servers can share info about botnet IP sets and current sources of abuse to more efficiently protect against DDOS and other attacks.

Features
--------

- block/allow IP addresses with iptables on request from remote host
- handle individual IP or CIDR ranges (xx.xx.xx.xx/mask)
- apply action permanently or with expiry periods
- keep IP/range whitelist - actions related to whitelisted IPs are ignored what prevents locking out the legitmate clients
- serialize requests to prevent concurrency issues with iptables
- REST API
- secured with SSL
- authenticated with basic authentication over SSL and by client source IP
- idempotent - actions resulting in duplicate entries are ignored
- do not interfere with more general iptables rules

FAQ
---

**Q: Why not use chef/puppet/ansible/salt/fabric/ssh for remote management instead?**

| For a couple of reasons:
- Security, trust and permission management. The above tools require giving a remote client the ssh root acces. Often we want to allow the IP analytics server to be able to block selected IPs without giving admin rights. 
- Performance 
- handle frequent and concurrent requests 
- No dependencies and easy to talk to from any platform and language. RESTful - lingua franca of the Internet 
- Protection against locking yourself out by applying wrong rule

Note that when the rules come from variuos sources they may interact badly. For firewalls the order of rules matters. That's why the functionality of remote rfw is limited to blocking individual IPs inserted in front of the ruleset. Be careful when using local rfwc where you have the full power of iptables at hand.

**Q: rfw limits REST client access by IP whitelisting. What if I need to connect from dynamic IP?**

rfw is intended for hosts with static IP addresses. It includes both servers and clients. For clients it is not as strong requirement as it seems since in typical rfw deployment the client is a data center collocated machine with static IP. If you really need to use REST client from various locations or from dynamic IP, you have a couple of options:

-  If you have any server with static IP with SSH access use it as a
   gateway client to rfw.
-  If you have dynamic IP from particular address pool assigned to your
   Internet Service Provider you may whitelist the entire address range.
-  You can connect through VPN with static IP.

**Q: Is it secure?**

Tampering with the core firewall should never be taken lightly. rfw must be run with root privileges in order to modify iptables so it requires a lot of trust in the software. There is a trade-off Sometimes there is no choice and you have to automate firewall actions across individual boxes anyway. Then rfw makes it more secure because the remote client does not need the full access to the host and can only block/allow individual IP addresses using rfw API. While rfw is designed with distributed system in mind, it may also improve security even for a single box by: - limiting iptables functionality to operate only on individual IP addresses - whitelisting selected IP addresses to prevent lock out - serializing iptables modifications

it provides advantage over changing iptables manually.

Security of rfw was the primary concern from the very beginning and influenced these design decisions: 
- simplicity 
- no fancy features 
- no external dependencies except iptables 
- limited functionality 
- no generic rules 
- not performance-optimal but conservative choice of time-proven crypto: 2048-bit RSA based SSL with HTTP Basic Authentication. TODO: Consider ECDSA and check HTTPS clients
compatibility

REST API
--------

-  to modify INPUT chain:
   PUT /input/input\_iface/src\_ip[?wait=true[&expire=n\_sec]]
   DELETE /input/input\_iface/src\_ip[?wait=true]

TODO add wait=true options in description

-  | to modify OUTPUT chain: PUT
   /output/output\_iface/dst\_ip[?expire=n\_sec]
   | DELETE /output/output\_iface/dst\_ip

-  | to modify FORWARD chain: PUT
   /forward/input\_iface[/src\_ip[/output\_iface[/dst\_ip[?expire=n\_sec]]]]
   | DELETE /forward/input\_iface[/src\_ip[/output\_iface[/dst\_ip]]]

-  | to list rules: GET /chain[/iface]
   | TODO allow various formats of rules list

-  return help info for client. Response should include server ip, port,
   and relevant rfw configuration details GET /

expire parameter is valid only for PUT requests

Examples:
---------

+------------------------------------------------+-----------------------------------------------------------------------------------------+
| rfw REST API                                   | iptables command                                                                        |
+================================================+=========================================================================================+
|                                                | Insert the DROP rule on INPUT chain to drop packets with source IP 11.22.33.44          |
|                                                | on network interface eth0. Translates to the command::                                  | 
|                                                |                                                                                         |
| PUT /drop/input/eth0/11.22.33.44               |     iptables -I INPUT -i eth0 -s 11.22.33.44 -j DROP                                    |
|                                                |                                                                                         |
+------------------------------------------------+-----------------------------------------------------------------------------------------+
|                                                | Delete the above rule. Translates to::                                                  |
|                                                |                                                                                         |
| DELETE /drop/input/eth0/11.22.33.44            |     iptables -D INPUT -i eth0 -s 11.22.33.44 -j DROP                                    |
+------------------------------------------------+-----------------------------------------------------------------------------------------+




+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| rfw REST API                                    | iptables command                                                                                                                                                         |
+=================================================+==========================================================================================================================================================================+
| PUT /input/eth0/12.34.56.78?expire=3600         | iptables -I INPUT -i eth0 -s 12.34.56.78 -j DROP <*with expiry time 3600 seconds*\ >                                                                                     |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| DELETE /input/eth0/12.34.56.78                  | iptables -D INPUT -i eth0 -s 12.34.56.78 -j DROP                                                                                                                         |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| PUT /input/any/12.34.56.78                      | iptables -I INPUT -s 12.34.56.78 -j DROP                                                                                                                                 |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| DELETE /input/any/12.34.56.78                   | iptables -D INPUT -s 12.34.56.78 -j DROP                                                                                                                                 |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| PUT /output/ppp/12.34.56.67                     | iptables -I OUTPUT -i ppp+ -d 12.34.56.78 -j DROP                                                                                                                        |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| PUT /forward/ppp/11.22.33.44/eth0/55.66.77.88   | iptables -I FORWARD -i ppp+ -s 11.22.33.44 -o eth0 -d 55.66.77.88 -j DROP                                                                                                |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| PUT /forward/any/0.0.0.0/any/55.66.77.88        | iptables -I FORWARD -d 55.66.77.88 -j DROP                                                                                                                               |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| PUT /forward/tun/11.22.33.44                    | iptables -I FORWARD -i tun+ -s 11.22.33.44 -j DROP                                                                                                                       |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| PUT /input/eth0/12.34.56.78?wait=true           | iptables -I INPUT -i eth0 -s 12.34.56.78 -j DROP <*and wait for finishing processing this iptables command -- previous request in the queue must also be processed*\ >   |
+-------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

| 0.0.0.0 can only be used in FORWARD chain to signal any IP
| iface without number like ppp means ppp+ in iptables parlance
| any in place of interface means any interface

PUT means for iptables: - for INPUT chain: insert the rule matching packets with specified source IP and input interface and apply DROP target - for OUTPUT chain: insert the rule matching packets with specified destination IP and output interface and apply DROP target

| DELETE means: DELETE the rule
| PUT checks for duplicates first so subsequent updates do not add new rules, but it is not purely idempotent since it may update the expiry timeout

Design choices
--------------

Note that HTTPS is not the perfect choice protocol here since by default it authenticates the server while we need to authenticate the client.  Anyway we want to use standard protocols here so we stick to the SSL + basic authentication scheme commonly used on the web. SSL authenticates the server with certificates while shared username + password authenticates the client. Client certificates in HTTPS are possible but not all client libraries support it; also it would complicate deployment.

Testing with curl::

    curl -v --cacert config/deploy/client/ca.crt --user myuser:mypasswd https://11.11.11.11:7393/input/eth0/1.2.3.4

or when testing on localhost you can skip certificate verification::

    curl -v --insecure --user myuser:mypasswd https://127.0.0.1:8443/input/eth0/1.2.3.4

Run rfw without installing
--------------------------

You still need to be root. Unzip tarball, cd to project folder::

    sudo bin/rfw -f config/rfw.conf --logfile=rfw.log


License
-------

Copyrite (c) 2014 `SecurityKISS Ltd <http://www.securitykiss.com>`__,
released under the `MIT License <LICENSE.txt>`__

| Yes, Mr patent attorney, you have nothing to do here. Find a decent job instead.
| Fight intellectual "property".
